// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculationsClient is the client API for Calculations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationsClient interface {
	DirectCodeLeftShiftCalculation(ctx context.Context, in *DirectCodeLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeLeftShiftResponse, error)
}

type calculationsClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationsClient(cc grpc.ClientConnInterface) CalculationsClient {
	return &calculationsClient{cc}
}

func (c *calculationsClient) DirectCodeLeftShiftCalculation(ctx context.Context, in *DirectCodeLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeLeftShiftResponse, error) {
	out := new(DirectCodeLeftShiftResponse)
	err := c.cc.Invoke(ctx, "/calculations.Calculations/DirectCodeLeftShiftCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationsServer is the server API for Calculations service.
// All implementations must embed UnimplementedCalculationsServer
// for forward compatibility
type CalculationsServer interface {
	DirectCodeLeftShiftCalculation(context.Context, *DirectCodeLeftShiftRequest) (*DirectCodeLeftShiftResponse, error)
	mustEmbedUnimplementedCalculationsServer()
}

// UnimplementedCalculationsServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationsServer struct {
}

func (UnimplementedCalculationsServer) DirectCodeLeftShiftCalculation(context.Context, *DirectCodeLeftShiftRequest) (*DirectCodeLeftShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectCodeLeftShiftCalculation not implemented")
}
func (UnimplementedCalculationsServer) mustEmbedUnimplementedCalculationsServer() {}

// UnsafeCalculationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationsServer will
// result in compilation errors.
type UnsafeCalculationsServer interface {
	mustEmbedUnimplementedCalculationsServer()
}

func RegisterCalculationsServer(s grpc.ServiceRegistrar, srv CalculationsServer) {
	s.RegisterService(&Calculations_ServiceDesc, srv)
}

func _Calculations_DirectCodeLeftShiftCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectCodeLeftShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).DirectCodeLeftShiftCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculations/DirectCodeLeftShiftCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).DirectCodeLeftShiftCalculation(ctx, req.(*DirectCodeLeftShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculations_ServiceDesc is the grpc.ServiceDesc for Calculations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculations.Calculations",
	HandlerType: (*CalculationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DirectCodeLeftShiftCalculation",
			Handler:    _Calculations_DirectCodeLeftShiftCalculation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculations/calculations.proto",
}
