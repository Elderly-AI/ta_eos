// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculationsClient is the client API for Calculations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationsClient interface {
	DirectCodeLowDigitsLeftShiftCalculation(ctx context.Context, in *DirectCodeLowDigitsLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeLowDigitsLeftShiftResponse, error)
	DirectCodeHighDigitsLeftShiftCalculation(ctx context.Context, in *DirectCodeHighDigitsLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeHighDigitsLeftShiftResponse, error)
	DirectCodeLowDigitsRightShiftCalculation(ctx context.Context, in *DirectCodeLowDigitsRightShiftRequest, opts ...grpc.CallOption) (*DirectCodeLowDigitsRightShiftResponse, error)
	DirectCodeHighDigitsRightShiftCalculation(ctx context.Context, in *DirectCodeHighDigitsRightShiftRequest, opts ...grpc.CallOption) (*DirectCodeHighDigitsRightShiftResponse, error)
}

type calculationsClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationsClient(cc grpc.ClientConnInterface) CalculationsClient {
	return &calculationsClient{cc}
}

func (c *calculationsClient) DirectCodeLowDigitsLeftShiftCalculation(ctx context.Context, in *DirectCodeLowDigitsLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeLowDigitsLeftShiftResponse, error) {
	out := new(DirectCodeLowDigitsLeftShiftResponse)
	err := c.cc.Invoke(ctx, "/calculations.Calculations/DirectCodeLowDigitsLeftShiftCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) DirectCodeHighDigitsLeftShiftCalculation(ctx context.Context, in *DirectCodeHighDigitsLeftShiftRequest, opts ...grpc.CallOption) (*DirectCodeHighDigitsLeftShiftResponse, error) {
	out := new(DirectCodeHighDigitsLeftShiftResponse)
	err := c.cc.Invoke(ctx, "/calculations.Calculations/DirectCodeHighDigitsLeftShiftCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) DirectCodeLowDigitsRightShiftCalculation(ctx context.Context, in *DirectCodeLowDigitsRightShiftRequest, opts ...grpc.CallOption) (*DirectCodeLowDigitsRightShiftResponse, error) {
	out := new(DirectCodeLowDigitsRightShiftResponse)
	err := c.cc.Invoke(ctx, "/calculations.Calculations/DirectCodeLowDigitsRightShiftCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculationsClient) DirectCodeHighDigitsRightShiftCalculation(ctx context.Context, in *DirectCodeHighDigitsRightShiftRequest, opts ...grpc.CallOption) (*DirectCodeHighDigitsRightShiftResponse, error) {
	out := new(DirectCodeHighDigitsRightShiftResponse)
	err := c.cc.Invoke(ctx, "/calculations.Calculations/DirectCodeHighDigitsRightShiftCalculation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationsServer is the server API for Calculations service.
// All implementations must embed UnimplementedCalculationsServer
// for forward compatibility
type CalculationsServer interface {
	DirectCodeLowDigitsLeftShiftCalculation(context.Context, *DirectCodeLowDigitsLeftShiftRequest) (*DirectCodeLowDigitsLeftShiftResponse, error)
	DirectCodeHighDigitsLeftShiftCalculation(context.Context, *DirectCodeHighDigitsLeftShiftRequest) (*DirectCodeHighDigitsLeftShiftResponse, error)
	DirectCodeLowDigitsRightShiftCalculation(context.Context, *DirectCodeLowDigitsRightShiftRequest) (*DirectCodeLowDigitsRightShiftResponse, error)
	DirectCodeHighDigitsRightShiftCalculation(context.Context, *DirectCodeHighDigitsRightShiftRequest) (*DirectCodeHighDigitsRightShiftResponse, error)
	mustEmbedUnimplementedCalculationsServer()
}

// UnimplementedCalculationsServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationsServer struct {
}

func (UnimplementedCalculationsServer) DirectCodeLowDigitsLeftShiftCalculation(context.Context, *DirectCodeLowDigitsLeftShiftRequest) (*DirectCodeLowDigitsLeftShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectCodeLowDigitsLeftShiftCalculation not implemented")
}
func (UnimplementedCalculationsServer) DirectCodeHighDigitsLeftShiftCalculation(context.Context, *DirectCodeHighDigitsLeftShiftRequest) (*DirectCodeHighDigitsLeftShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectCodeHighDigitsLeftShiftCalculation not implemented")
}
func (UnimplementedCalculationsServer) DirectCodeLowDigitsRightShiftCalculation(context.Context, *DirectCodeLowDigitsRightShiftRequest) (*DirectCodeLowDigitsRightShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectCodeLowDigitsRightShiftCalculation not implemented")
}
func (UnimplementedCalculationsServer) DirectCodeHighDigitsRightShiftCalculation(context.Context, *DirectCodeHighDigitsRightShiftRequest) (*DirectCodeHighDigitsRightShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectCodeHighDigitsRightShiftCalculation not implemented")
}
func (UnimplementedCalculationsServer) mustEmbedUnimplementedCalculationsServer() {}

// UnsafeCalculationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationsServer will
// result in compilation errors.
type UnsafeCalculationsServer interface {
	mustEmbedUnimplementedCalculationsServer()
}

func RegisterCalculationsServer(s grpc.ServiceRegistrar, srv CalculationsServer) {
	s.RegisterService(&Calculations_ServiceDesc, srv)
}

func _Calculations_DirectCodeLowDigitsLeftShiftCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectCodeLowDigitsLeftShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).DirectCodeLowDigitsLeftShiftCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculations/DirectCodeLowDigitsLeftShiftCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).DirectCodeLowDigitsLeftShiftCalculation(ctx, req.(*DirectCodeLowDigitsLeftShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_DirectCodeHighDigitsLeftShiftCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectCodeHighDigitsLeftShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).DirectCodeHighDigitsLeftShiftCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculations/DirectCodeHighDigitsLeftShiftCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).DirectCodeHighDigitsLeftShiftCalculation(ctx, req.(*DirectCodeHighDigitsLeftShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_DirectCodeLowDigitsRightShiftCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectCodeLowDigitsRightShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).DirectCodeLowDigitsRightShiftCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculations/DirectCodeLowDigitsRightShiftCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).DirectCodeLowDigitsRightShiftCalculation(ctx, req.(*DirectCodeLowDigitsRightShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculations_DirectCodeHighDigitsRightShiftCalculation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectCodeHighDigitsRightShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationsServer).DirectCodeHighDigitsRightShiftCalculation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculations/DirectCodeHighDigitsRightShiftCalculation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationsServer).DirectCodeHighDigitsRightShiftCalculation(ctx, req.(*DirectCodeHighDigitsRightShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculations_ServiceDesc is the grpc.ServiceDesc for Calculations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculations.Calculations",
	HandlerType: (*CalculationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DirectCodeLowDigitsLeftShiftCalculation",
			Handler:    _Calculations_DirectCodeLowDigitsLeftShiftCalculation_Handler,
		},
		{
			MethodName: "DirectCodeHighDigitsLeftShiftCalculation",
			Handler:    _Calculations_DirectCodeHighDigitsLeftShiftCalculation_Handler,
		},
		{
			MethodName: "DirectCodeLowDigitsRightShiftCalculation",
			Handler:    _Calculations_DirectCodeLowDigitsRightShiftCalculation_Handler,
		},
		{
			MethodName: "DirectCodeHighDigitsRightShiftCalculation",
			Handler:    _Calculations_DirectCodeHighDigitsRightShiftCalculation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculations/calculations.proto",
}
